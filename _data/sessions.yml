-
  id: 101
  title: "Registration, Refreshments and Exhibition"
  service: true
-
  id: 102
  title: "Conference Welcome"
  description: 
  subtype: keynote
  speakers:
  language: en
-
  id: 103
  title: "Changeover"
  service: true
-
  id: 104
  title: "Break"
  service: true
-
  id: 105
  title: "Lunch"
  service: true
-
  id: 106
  title: "To Be Announced!"
  service: true
-
  id: 202
  title: "Lightning Talks"
  description: |
    Building your first capability, a retrospective - Fiona Hobbs<br/>
    Behind the fourth wall - James Leftley<br/>
    Are personas dead? - Emily Hewitson<br/>
    Build high performing teams by aplying a product mindset - Ryan Greenhall<br/>
    It’s all about the Culture - Mark Jose<br/>
    The fresh prince of the testing atelier - Stephen Mounsey
  subtype: keynote
  speakers: [21, 22, 23, 24, 25, 26]
  language: en
-
  id: 203
  title: "Panel Session - To Be Announced!"
  description:
  subtype: keynote
  speakers:
  language: en
-
  id: 204
  title: "A.I. & The Future of Work"
  description: |
    Robots are going to take our jobs eventually – in fact it’s already started. This is a comical, yet real, look at what the future looks likes and ways to future-proof yourself and your business.
  subtype: keynote
  speakers: [4]
  language: en
  video: "https://www.youtube.com/embed/pvvJDFMWPXU"
-
  id: 205
  title: "Decision-making for Grown-Ups"
  description: |
    <p>In this talk Liz introduces different ways of looking at the world that help us choose the right approach, including Cynefin, a framework for making sense of situations depending on certainty or uncertainty; Wardley Mapping, which lets us understand our organizational and technical structure as it evolves; and Real Options, the principles of which help us to postpone decisions until we have more information.</p>
    <p>Find out how these lenses and their associated tools are helping leaders and technologists to navigate their changing landscapes and ecosystems with clearer insight, less frustration, less risk and faster delivery.</p>
  subtype: keynote
  speakers: [3]
  language: en
-
  id: 206
  title: "Closing Remarks"
  description: 
  subtype: keynote
  speakers:
  language: en
-
  id: 999
  title: ""
  clickable: false
-
  id: 001
  title: "Servers are dead! How architecture in the 2020s is being revolutionised by serverless"
  description: |
    <p>Serverless technology is no longer new. But we're quickly reaching the point where it's becoming the default way to build applications. And it's having a profound effecton how do good software architecture. Serverless means big changes in how we must manage performance, state, scale, cost, and so much more. It's a huge, and exciting, opportunity.</p>
    <p>The BBC now has seven years of serverless experience. Dozens have projects have been made in a serverless way, using either AWS Lambda or in-house solutions. There have been some painful moments - it has not been an easy adoption. But the technology is maturing and best-practice is becoming clearer. Serverless is now the default way that many of the BBC's website and APIs are made. It's faster to develop, more flexible, and can scale to the big moments.</p>
    <p>So what does good serverless architecture look like? And is it really as performant as containers or servers? In this session we'll explore the potential and the pitfalls. The best-practice, the opportunities, and what it means to software architecture. The serverless revolution is here - let's get the architecture right.</p>
  type: A
  subtype: presentation
  speakers: [5]
  language: en
-
  id: 002
  title: "First Steps as a DevOps Engineer"
  description: |
    <p>In this anecdotal talk I discuss seven lessons that I learnt whilst working as a DevOps Engineer on a mobile app project for a financial institution.</p>
      <ol>
        <li>
          "Don't do everything at once": I outline the steps we took to overhaul our CI/CD infrastructure, and why it was best to make these changes iteratively rather than all at once.
        </li>
        <li>
          "Don't forget quick hacks": I describe learning to balance pragmatism/best practises in the context of a quick hack we employed to quickly integrate a mobile device farm into our CI pipeline.
        </li>
        <li>
          "You can't do it all": I talk about why I wanted to use an infrastructure-as-code tool to deploy our CI/CD infrastructure and why such a tool wasn't the right choice for our project even though it would've been a valuable learning exercise.
        </li>
        <li>
          "Firefighting is real and solutions can be obvious" a.k.a "The Curious Case of the Pending Pipelines": I recall a firefighting incident in which the solution was extremely obvious but not immediately found...
        </li>
        <li>
          "Be data-driven": I describe how scraping and programatically analysing CI/CD pipeline data allowed us to optimise the pipelines and identify/monitor infrastructure faults when running ~200 pipeline jobs per day. This would have been very time consuming and wasteful if done manually.
        </li>
        <li>
          "Saying No": I talk about the need say no/delegating when working in a support role.
        </li>
        <li>
          "You can't always use your favourite tool": I talk about deciding to prioritise project needs over my personal preferences in choosing not to use R to analyse CI/CD pipelines.
        </li>
      </ol>
    </p>
  type: DTDO
  subtype: presentation
  speakers: [6]
  language: en
-
  id: 003
  title: "Chaos Engineering"
  description: |
    <p>Chaos Engineering - The unexpected benefits of designing everything to fail. Explains why you would want to implement this into your application from the beginning and how designing systems that fail gives you the freedom to experiment and bring in expertise from outside the software engineering circle.</p>
  type: A
  subtype: presentation
  speakers: [7]
  language: en
-
  id: 004
  title: "Evolving TDD - Moving past single example tests & Simplicity, the one and only rule"
  description: |
    <h5>Evolving TDD - Moving past single example tests.</h5>
    <p>This talk aims to provide the audience with an introduction to property-based testing and the practical steps on how to incorporate Property-Based Testing into a TDD workflow.</p>
    <p>Applications written using Functional Programming languages and patterns are becoming more and more mainstream. Clojure, Scala and Haskell are among the growing numbers of purely functional programming languages appearing in Government and hugely successful private sector applications. Even Java is increasing focus on the Functional paradigm with the inclusion of lambda functions in version 1.8.</p>
    <p>One of the cornerstones of Functional Programming is pure functions and Property-Based Testing is an exceptionally powerful tool for testing this kind of function. The ability to have the computer generate example tests and verify the output has led to the discovery of serious bugs in some of our most established libraries.</p>
    <p>A TDD workflow involves the continual addition of small amounts of tested behaviour into either a new or existing application. The smaller the steps the developer can take, the better. Driving development with property tests has the tendency to force you to write more behaviour code than your simple example tests would.</p>
    <p>Following the talk an attendee should have an understanding of what property testing is, where it's useful and what tools are available to implement it.</p>
    <p>They will see how I incorporate Property-Based Testing into my TDD workflow and how it changes the way I drive my development.
    <h5>Simplicity, the one and only rule.</h5>
    <p>It should be number one word in any software developer's dictionary. SIMPLICITY...but it unfortunately isn't. If you do this, if you manage to master simplicity then the rest quite simply doesn't matter, everything else falls into place as if by magic - even your reputation as a software developer!</p>
    <p>Why on earth is simplicity so important? How do we approach it? How do we make simplicity transpire in every aspect of software development? What is the difference between doing the easiest thing Vs doing the simplest thing?</p>
    <p>In this talk I will do my absolute best to answer all the questions above and anything else related with it. I will talk about the importance of Test Driven Development to achieve this and also the importance about not philosophising about where things might change in your code, but focusing on making change simple by letting real examples guide you and forgetting about silly outdated guidelines like SOLID.</p>
    <p>Avoiding "death by object orientation" is a must, the main reason for the mess most codebases end up in is over engineering. It is your duty as a Software Developer to challenge this behaviour and I hope that with this talk will empower software developers to pursue simplicity by focusing on the "now" and "what actually is needed" and then from there, making a judgement on what the simplest implementation possible is.</p>
  type: DP
  subtype: presentation
  speakers: [8,9]
  language: en
-
  id: 005
  title: "A design thinker cements his place in a tech company"
  description: |
    An action-research piece sharing the practice and lessons learnt by the Design team at Grid as they collaborate with the construction industry, local authorities and government to develop a new project. Detailing the design-led approach taken through Grid’s first few phases of our product development process.<br/>
    Introduction to Nate; Who I am? Why am I speaking? Purpose of the talk<br/>
    Introduction to Grid:  The Company, what we do<br/>
    Introduction to “Freight Traffic Control” project: The problem/opportunity, project partners and collaborators.<br/>
    Grid Process Overview: Our process<br/>
    Explore: Objectives, Interventions, Participants, Output, Reflections<br/>
    Research: Objectives, Interventions, Participants, Output, Reflections<br/>
    Prototype: Objectives, Interventions, Participants, Output. Reflections<br/>
    Define: Objectives, Interventions, Participants, Output. Reflections<br/>
    Summary: Output, feedback from the crossfunctional team, business leadership?<br/>
    Key reflections and lessons learnt<br/>
    Q+A
  type: UXUR
  subtype: presentation
  speakers: [10]
  language: en
-
  id: 006
  title: |
    Prerequisites for Evolutionary Architecture - Chris Howe-Jones<br/>
    How to build an application for under £100 - Dan Pudwell
  description: |
    Building an Architecture that can adapt to change is challenging. This talk will explore what are the critical factors in an evolutionary architecture & what should be in place to support them.<br/>
    It's about how we built an application to help disabled passengers get through airports easier.  The crux of the talk is about Serverless but I also touch on various aspects of AWS.
  type: A
  subtype: presentation
  speakers: [11,12]
  language: en
-
  id: 007
  title: "Building a UX Culture"
  description: |
    The mantra of 'move fast and break things' has dominated over the past 10 years and whilst it may work in small organisations, how do you do that if your organisation is massive?</br>
    UX teams may encounter resistance from managers, developers and even customers, how do we foster a positive relationship where UX is put at the centre of development without becoming a blocker to others?<br/>
    How can we build successful UX cultures in larger organisations and teams without causing civil war?<br/>
    This talk looks at the stakeholders involved with approaches and tips to build positive user centred teams of all sizes.
  type: UXUR
  subtype: presentation
  speakers: [13]
  language: en
-
  id: 008
  title: "Language agnostic coding standards"
  description: |
    Micro-services have changed the world, we can ship good software with less hassle than ever. However we are left with lots of smaller repos to maintain. At SaleCycle we use “the best tools for each job”. This includes programming language. We have AWS lambdas, Batch jobs, and ECS services written in C#, F#, Java, Kotlin, Typescript, Javascript, Go, and probably others I don’t know about.<br/>
    So how do we promote a culture of sharing and collaboration between teams using such a range of languages and technologies?<br/>
    We begin by defining a generic set of coding principles in which data (arrows) flows through services (boxes). We then discuss how these principles can be applied to different languages, and more remarkably, to both the objective and functional paradigms. The result is that developers can reuse patterns and techniques irrespective of which language or environment they are using.
  type: A
  subtype: presentation
  speakers: [14]
  language: en
-
  id: 009
  title: "Testing vs Monitoring: build it right in production"
  description: |
    TDD helps software engineers learn, understand, and internalise the key principles of good modular design. Testing is good at finding and fixing issues before deploying to production. I was working for companies that the goal is to have 100% test coverage - unit tests, acceptance tests, selenium tests … They are just not enough!<br/>
    And yet there are still bugs in production. When they are found it’s the greenhouse for the blame culture, the creation of laziness. Moreover, waiting for hour-long selenium tests to finish before production release is intolerable.<br/>
    To fix the problem and build it right, we, in Uswitch engineering team, make trade-offs between testing and monitoring. For instance, when writing the server application, we don’t need to have a test to mock the server starts. Instead, we ping the production page every minute to ensure HTTP status 200.<br/>
    Also beneficial from our microservice architecture, we can monitor the percentage of ingress 200 responses to guarantee servers availability. Let alone the bug reporting systems that we use like sentry and airbrake.<br/>
    Servers working doesn’t mean the business is working. No unit tests can ensure that. To be honest, as long as the company still making profits the CEO won’t care even the servers are down. Therefore on the business level, we have daily analysis reports to track the important KPIs - daily impressions, clicks and conversions.<br/>
    We should build the testing and monitoring right, test the essential complex business logics while monitoring the crucial things. Having the unit tests to cover core business logics are reasonable, the stock trading backend system definitely needs unit tests for rounding errors before losing thousands of pounds. Trade-off the selenium tests to monitor website 5XX rates would make the frontend development so much easier and can release faster. So, build it right with testing and monitoring.
  type: DTDO
  subtype: presentation
  speakers: [15]
  language: en
-
  id: 010
  title: "Shiny new product? Keep it well polished with UX"
  description: |
    The last two decades have seen the customer take control of the buying process. The growth of digital platforms means they have more choice of how, when and from whom they buy than ever before.  And, it's not just the product that will keep them coming back. From finding your company on Twitter to evangelising your brand, the whole experience and every interaction should shine.<br/>
    What are the ingredients required to turn your customers into advocates and how, even on the smallest budget, can you keep your new product shiny well after launch?
  type: UXUR
  subtype: presentation
  speakers: [16]
  language: en
-
  id: 011
  title: "Self care in the tech workplace (and a bit wider)"
  description: |
    Is it selfish to look after ourselves? We all use up our energy (physical, mental & emotional) in different ways at work. How much thought do you give to how you recharge that energy?<br/>
    We'll explore the concept of self care, some of the things that might fall into it and what companies can to do help their staff.<br/>
    We'll also have an interactive exercise to encourage you to think about what you do for self care and reflect on what you could do differently.<br/>
    There will be stickers!
  type: DP
  subtype: presentation
  speakers: [17]
  language: en
-
  id: 012
  title: "Accessibility 101"
  description: |
    A lot of us will know a little about our services, why they should be accessible, and what kind of things we should be doing to make them accessible.<br/>
    You might know you need to ‘add alt text’ or ‘have a heading hierarchy’, but if you haven’t done them before, will you know or feel confident in implementing them? How do your designs cater for them, and how do you research them with the users they’re intended for? With feedback from your users, how do you adapt your designs if necessary, before building them into your service? And how do you communicate about them with the rest of your team?<br/>
    Sarah and Mark, a User Researcher and UX Designer with a few years of government experience, will share practical advice about how you design and research these with your users - offering an interactive insight into how research might work.<br/>
  type: UXUR
  subtype: presentation
  speakers: [18,19]
  language: en
-
  id: 013
  title: "UX, UR and everything in-between"
  description: |
    From Graphic Design to Web Design to UX/UI over to AI and UR the demand for the right person for the job is ever-changing. Gone are the days of just having 'that one creative person' who can 'somehow' do everything. Teams are becoming more specialised and niche and skillsets are becoming more diverse.<br/>
    With the creative/tech industry constantly evolving, I often wonder, how do we keep up? Above I inadvertently mentioned how my roles over the years have changed.<br/>
    In my talk I would like to talk about the importance of UX, UR and UI in any creative business. How developers can work better with UX and how to better sell your idea to stakeholders and difficult project managers.<br/>
    Takeaways will improve<br/>
    <ul>
      <li>A brief understanding of the creative climate (UX/UI/UR/AI)</li>
      <li>An understanding of how UX has evolved and how demand has changed</li>
      <li>How you can fit into the climate and become a creative badass</li>
      <li>How to adapt your skillset for individual projects</li>
      <li>How to deal with 'difficult project managers and stakeholders'</li>
    </ul>
    This talk will explore my experiences of how UX has helped improve the general outlook of products in a 500+ business!
  type: UXUR
  subtype: presentation
  speakers: [20]
  language: en
-
  id: 015
  title: "Reliability Engineering for Humans"
  description: |
    The concepts and practices of Site Reliability Engineering are changing the way we build and operate our platforms and enabling us to have more meaningful conversations about availability, service-level objectives, and cost. But what are the benefits for the engineer holding the pager? Can we add a human element to our error budgets? Join Hannah Foxwell to look at Site Reliability Engineering practices through a human lens. Hannah combines SRE with HumanOps and explains how to use SRE practices to improve the health and well-being of your team.
  type: DTDO
  subtype: presentation
  speakers: [27]
  language: en